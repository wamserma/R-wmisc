// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// strHead
char strHead(std::string s);
RcppExport SEXP Wmisc_strHead(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(strHead(s));
    return rcpp_result_gen;
END_RCPP
}
// strHeadLower
char strHeadLower(std::string s);
RcppExport SEXP Wmisc_strHeadLower(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(strHeadLower(s));
    return rcpp_result_gen;
END_RCPP
}
// strTail
std::string strTail(std::string s);
RcppExport SEXP Wmisc_strTail(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(strTail(s));
    return rcpp_result_gen;
END_RCPP
}
// strTake
std::string strTake(std::string s, int n);
RcppExport SEXP Wmisc_strTake(SEXP sSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(strTake(s, n));
    return rcpp_result_gen;
END_RCPP
}
// strDrop
std::string strDrop(std::string s, int n);
RcppExport SEXP Wmisc_strDrop(SEXP sSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(strDrop(s, n));
    return rcpp_result_gen;
END_RCPP
}
// CWmisc_mmap
List CWmisc_mmap(std::string path);
RcppExport SEXP Wmisc_CWmisc_mmap(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(CWmisc_mmap(path));
    return rcpp_result_gen;
END_RCPP
}
// CWmisc_munmap
void CWmisc_munmap(List fdVec);
RcppExport SEXP Wmisc_CWmisc_munmap(SEXP fdVecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fdVec(fdVecSEXP);
    CWmisc_munmap(fdVec);
    return R_NilValue;
END_RCPP
}
// CWmisc_nextToken
List CWmisc_nextToken(IntegerVector currentPtr, IntegerVector delims);
RcppExport SEXP Wmisc_CWmisc_nextToken(SEXP currentPtrSEXP, SEXP delimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type currentPtr(currentPtrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type delims(delimsSEXP);
    rcpp_result_gen = Rcpp::wrap(CWmisc_nextToken(currentPtr, delims));
    return rcpp_result_gen;
END_RCPP
}
// CWmisc_validPtr
bool CWmisc_validPtr(IntegerVector base, IntegerVector target, int offset);
RcppExport SEXP Wmisc_CWmisc_validPtr(SEXP baseSEXP, SEXP targetSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type base(baseSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(CWmisc_validPtr(base, target, offset));
    return rcpp_result_gen;
END_RCPP
}
// CWmisc_subPtr
IntegerVector CWmisc_subPtr(IntegerVector a, IntegerVector b);
RcppExport SEXP Wmisc_CWmisc_subPtr(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(CWmisc_subPtr(a, b));
    return rcpp_result_gen;
END_RCPP
}
// CWmisc_addPtr
IntegerVector CWmisc_addPtr(IntegerVector a, IntegerVector b);
RcppExport SEXP Wmisc_CWmisc_addPtr(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(CWmisc_addPtr(a, b));
    return rcpp_result_gen;
END_RCPP
}
